// <auto-generated />
using System;
using EmployeeApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905122403_AddNotificationTable")]
    partial class AddNotificationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeApi.Domain.Block", b =>
                {
                    b.Property<Guid>("BlockerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("BlockerId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("Blocks", "People");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentCommentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ParentCommentId1");

                    b.HasIndex("PostId1");

                    b.HasIndex("PostId", "CreatedAt");

                    b.HasIndex(new[] { "PostId", "CreatedAt" }, "IX_Comments_PostTime");

                    b.ToTable("Comments", "Contents");
                });

            modelBuilder.Entity("EmployeeApi.Domain.CommentReaction", b =>
                {
                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReactedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("CommentId1");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReactions", "Contents");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AnonymityMode")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DirectKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Privacy")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DirectKey")
                        .IsUnique()
                        .HasFilter("[DirectKey] IS NOT NULL");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Conversations_CreatedAt");

                    b.ToTable("Conversations", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.ConversationInvite", b =>
                {
                    b.Property<Guid>("InviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("int");

                    b.Property<int>("Uses")
                        .HasColumnType("int");

                    b.HasKey("InviteId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex(new[] { "Code" }, "UX_ConversationInvites_Code")
                        .IsUnique();

                    b.ToTable("ConversationInvites", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.ConversationMember", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarOverride")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DisplayNameOverride")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Role" }, "IX_ConversationMembers_Role");

                    b.ToTable("ConversationMembers", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.ConversationRole", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConversationId", "Name");

                    b.ToTable("ConversationRoles", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Credential", b =>
                {
                    b.Property<Guid>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordAlgo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("PasswordUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderSubject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CredentialId");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderSubject")
                        .IsUnique();

                    b.ToTable("Credentials", "Auth");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Follow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FolloweeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("FollowerId", "FolloweeId");

                    b.HasIndex("FolloweeId");

                    b.ToTable("Follows", "People");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeleteForEveryone")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MemberConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ThreadRootId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("MessageId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("MemberConversationId", "MemberUserId");

                    b.HasIndex(new[] { "ConversationId", "CreatedAt" }, "IX_Messages_ConvTime");

                    b.HasIndex(new[] { "ThreadRootId", "CreatedAt" }, "IX_Messages_ThreadTime");

                    b.ToTable("Messages", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.MessageAttachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SizeBytes")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex(new[] { "MessageId" }, "IX_MessageAttachments_MessageId");

                    b.ToTable("MessageAttachments", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.MessageReaction", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("ReactedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId", "UserId", "Emoji");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "MessageId" }, "IX_MessageReactions_MessageId");

                    b.ToTable("MessageReactions", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.MessageRead", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex(new[] { "UserId", "ReadAt" }, "IX_MessageReads_UserTime");

                    b.ToTable("MessageReads", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.PinnedMessage", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PinnedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PinnedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConversationId", "MessageId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PinnedById");

                    b.ToTable("PinnedMessages", "Chat");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowReactions")
                        .HasColumnType("bit");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MediaJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("AuthorId", "CreatedAt")
                        .IsDescending(false, true);

                    b.HasIndex(new[] { "AuthorId", "CreatedAt" }, "IX_Posts_AuthorTime");

                    b.ToTable("Posts", "Contents");
                });

            modelBuilder.Entity("EmployeeApi.Domain.PostAudience", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Mode")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("PostId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "UserId", "Mode");

                    b.HasIndex("PostId1");

                    b.HasIndex("UserId");

                    b.ToTable("PostAudiences", "Contents");
                });

            modelBuilder.Entity("EmployeeApi.Domain.PostReaction", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReactedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("PostId1");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "Type");

                    b.HasIndex(new[] { "PostId", "Type" }, "IX_PostReactions_Type");

                    b.ToTable("PostReactions", "Contents");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Profile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Bio")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("Handle")
                        .IsUnique();

                    b.ToTable("Profiles", "People");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RefreshTokenHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("ReplacedBySessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId", "ExpiresAt", "RevokedAt");

                    b.ToTable("Sessions", "Auth");
                });

            modelBuilder.Entity("EmployeeApi.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("UserId");

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("EmployeeApi.Domain.UserEmail", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailId");

                    b.HasIndex("Email");

                    b.HasIndex("UserId", "IsPrimary")
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("UserEmails", "Auth");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Block", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", "Blocked")
                        .WithMany("BlocksTo")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "Blocker")
                        .WithMany("BlocksFrom")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Comment", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");

                    b.HasOne("EmployeeApi.Domain.Comment", null)
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EmployeeApi.Domain.Comment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId1");

                    b.HasOne("EmployeeApi.Domain.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId1");

                    b.Navigation("Author");

                    b.Navigation("Parent");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EmployeeApi.Domain.CommentReaction", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId1");

                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Conversation", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EmployeeApi.Domain.ConversationInvite", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Conversation", "Conversation")
                        .WithMany("Invites")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EmployeeApi.Domain.ConversationMember", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Conversation", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "User")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeApi.Domain.ConversationRole", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Credential", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Follow", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeApi.Domain.Message", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", "Author")
                        .WithMany("AuthoredMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EmployeeApi.Domain.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.Message", null)
                        .WithMany()
                        .HasForeignKey("ParentMessageId");

                    b.HasOne("EmployeeApi.Domain.Message", null)
                        .WithMany()
                        .HasForeignKey("ThreadRootId");

                    b.HasOne("EmployeeApi.Domain.ConversationMember", "MemberPersona")
                        .WithMany()
                        .HasForeignKey("MemberConversationId", "MemberUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("Conversation");

                    b.Navigation("MemberPersona");
                });

            modelBuilder.Entity("EmployeeApi.Domain.MessageAttachment", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("EmployeeApi.Domain.MessageReaction", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "User")
                        .WithMany("MessageReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeApi.Domain.MessageRead", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Message", "Message")
                        .WithMany("Reads")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "User")
                        .WithMany("MessageReads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeApi.Domain.PinnedMessage", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Conversation", "Conversation")
                        .WithMany("Pins")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "PinnedBy")
                        .WithMany()
                        .HasForeignKey("PinnedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Message");

                    b.Navigation("PinnedBy");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Post", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EmployeeApi.Domain.PostAudience", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.Post", "Post")
                        .WithMany("Audiences")
                        .HasForeignKey("PostId1");

                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EmployeeApi.Domain.PostReaction", b =>
                {
                    b.HasOne("EmployeeApi.Domain.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeApi.Domain.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId1");

                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Profile", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("EmployeeApi.Domain.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Session", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeApi.Domain.UserEmail", b =>
                {
                    b.HasOne("EmployeeApi.Domain.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Comment", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Conversation", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("Pins");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Reactions");

                    b.Navigation("Reads");
                });

            modelBuilder.Entity("EmployeeApi.Domain.Post", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("EmployeeApi.Domain.User", b =>
                {
                    b.Navigation("AuthoredMessages");

                    b.Navigation("BlocksFrom");

                    b.Navigation("BlocksTo");

                    b.Navigation("ConversationMembers");

                    b.Navigation("Credentials");

                    b.Navigation("Emails");

                    b.Navigation("MessageReactions");

                    b.Navigation("MessageReads");

                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
